<?php

/**
 * Implementation of hook_permissions()
 * 
 * Set the permission types that this module uses. Essentially we
 * want permissions that protect creation, editing and deleting of
 * chado data objects
 * @ingroup tripal_gene
 *
 */

require_once 'includes/tripal_gene.admin.inc';
require_once 'includes/tripal_gene.chado_node.inc';

function tripal_gene_permission() {
  return array(
    'access chado_gene content' => array(
      'title' => t('View GENES'),
      'description' => t('Allow users to view gene pages.'),
    ),
    'create chado_gene content' => array(
      'title' => t('Create GENE'),
      'description' => t('Allow users to create new gene pages.'),
    ),
    'delete chado_gene content' => array(
      'title' => t('Delete GENE'),
      'description' => t('Allow users to delete gene pages.'),
    ),
    'edit chado_gene content' => array(
      'title' => t('Edit GENE'),
      'description' => t('Allow users to edit gene pages.'),
    ),
    'administer tripal gene' => array(
      'title' => t('Administer GENE'),
      'description' => t('Allow users to administer all genes.'),
    ),
  );
}


/**
 * Implements hook_menu().
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup tripal_gene
 */
function tripal_gene_menu() {
  $items = array();
  // the administative settings menu
  $items['admin/tripal/chado/tripal_gene'] = array(
    'title' => 'Gene Search',
    'description' => 'Gene search allows retrieval of gene information.',
    'page callback' => 'tripal_gene_admin_gene_view',
    'access arguments' => array('administer tripal gene'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/tripal/chado/tripal_gene/help'] = array(
    'title' => 'Help',
    'description' => "A description of the Tripal gene_search module including a short description of it's usage.",
    'page callback' => 'theme',
    'page arguments' => array('tripal_gene_help'),
    'access arguments' => array('administer tripal gene'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );


  $items['admin/tripal/chado/tripal_gene/views/enable'] = array(
    'title' => 'Enable Gene Administrative View',
    'page callback' => 'tripal_enable_view',
    'page arguments' => array('tripal_gene_admin_gene', 'admin/tripal/chado/tripal_gene'),
    'access arguments' => array('administer tripal gene'),
    'type' => MENU_CALLBACK,
  );  
  return $items;
}

/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup tripal_organism
 */
function tripal_gene_views_api() {
  $path = drupal_get_path('module', 'tripal_gene');
  return array(
    'api' => 3.0,
    'path' => $path . '/views',
  );
}

function tripal_gene_add_all_handler($form, &$form_state) {
  module_load_include('inc', 'lightshop', 'lightshop.pages');

  $view = views_get_view('gene');
  //in order to get all the results of the view, set items per page to 0
  $view->set_items_per_page(0);
  $view->execute();
  $results = $view->result;

  foreach ($results as $res) {
            $sql =<<<SQL
                select g.*,
                   chf.nid
                from   chado.gene g,
                   public.chado_feature chf
            where  g.gene_id = chf.feature_id
                   and g.name = :name
SQL;
            $args = array(':name' => $res->gene_name);
            $gene = chado_query($sql, $args)->fetchObject();

            if ($gene) {
                $node = node_load($gene->nid);
                lightshop_add2basket($node);
            }
  }
  //drupal_set_message(print_r($results, 1));
  return;
}


/**
 * Implementation of hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * @ingroup tripal_organism
 */
function tripal_gene_form_alter(&$form, &$form_state, $form_id) {

  $form['#method'] = 'post';
  switch ($form_id) {
    case 'chado_gene_node_form':
      // turn of preview button for insert/updates
      $form['actions']['preview']['#access'] = FALSE;
      //remove the body field
      unset($form['body']);
      break;
    case 'views_exposed_form':
      if ($form['#id'] == 'views-exposed-form-gene-page') {
          // Add a button

          $form['submit_basket']['#type'] = 'submit';
          $form['submit_basket']['#value'] = t('Add all genes to Basket');
          $form['submit_basket']['#submit'] = array('tripal_gene_add_all_handler', 'views_exposed_form_submit');
          $form['submit_basket']['#executes_submit_callback'] = 1;
      }
      break;
  } //switch
}


/**
 * Implements hook_help().
 * Adds a help page to the module list
 *
 * @ingroup tripal_organism
 */
function tripal_gene_help ($path, $arg) {
  if ($path == 'admin/help#tripal_gene') {
    return theme('tripal_gene_help', array());
  }
}

/**
 *  Implements hook_theme().
 *
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_organism
 */
function tripal_gene_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');

  $items = array(
    'node__chado_gene' => array(
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ),
    'tripal_gene_description' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_gene_description',
      'path' => "$path/theme/templates",
    ),
    'tripal_gene_jbrowse' => array(
        'variables' => array('node' => NULL),
        'template' => 'tripal_gene_jbrowse',
        'path' => "$path/theme/templates",
    ),
  );
 
  return $items;
}
